生产者消费者问题（Producer-consumer problem），也称有限缓冲问题（Bounded-buffer problem），是一个多线程同步问题的经典案例。
生产者生成一定量的数据放到缓冲区中，然后重复此过程；与此同时，消费者也在缓冲区消耗这些数据。生产者和消费者之间必须保持同步，
要保证生产者不会在缓冲区满时放入数据，消费者也不会在缓冲区空时消耗数据。不够完善的解决方法容易出现死锁的情况，此时进程都在等待唤醒。

当缓冲区已满时，生产者线程停止执行，放弃锁，使自己处于等状态，让其他线程执行；
当缓冲区已空时，消费者线程停止执行，放弃锁，使自己处于等状态，让其他线程执行。

当生产者向缓冲区放入一个产品时，向其他等待的线程发出可执行的通知，同时放弃锁，使自己处于等待状态；
当消费者从缓冲区取出一个产品时，向其他等待的线程发出可执行的通知，同时放弃锁，使自己处于等待状态。

实现多线程有多种方式，生产者消费者也是面试中经常考察的问题，今天就碰到了一道这样的题......

今天先介绍第一种：

package cn.demo;

import java.sql.SQLOutput;
import java.util.LinkedList;

//定义一个仓库类
class Storage {
    //定义仓库容量
    private final int MAX_SIZE = 10;
    //仓库存储的载体
    private LinkedList<Object> list = new LinkedList<>();

    public void produce(){
        synchronized (list){
            while(list.size()+1>MAX_SIZE){
                System.out.println("[生产者"+Thread.currentThread().getName()+"] 仓库已满");
                try{
                    list.wait();
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
            list.add(new Object());
            System.out.println("[生产者"+Thread.currentThread().getName()+"]生产者了一个产品，现库存"+list.size());
            list.notifyAll();
        }
    }
    public void consume(){
        synchronized (list){
            while(list.size() == 0){
                System.out.println("[生产者"+Thread.currentThread().getName()+"]仓库为空");
                try{
                    list.wait();
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
            list.remove();
            System.out.println("[消费者"+Thread.currentThread().getName()+"]消费一个产品，现库存"+list.size());
            list.notifyAll();
        }
    }
}

//定义生产者类
class Producer implements Runnable {
    Storage storage = new Storage();

    public Producer(){}

    public Producer(Storage storage){
        this.storage = storage;
    }
    @Override
    public void run() {
        while(true){
            try {
                Thread.sleep(1000);
                storage.produce();
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }
}

//定义消费者类
class Consumer implements Runnable{
    Storage storage = new Storage();

    public Consumer(){}

    public Consumer(Storage storage){
        this.storage = storage;
    }

    @Override
    public void run() {
        while(true){
            try {
                Thread.sleep(1000);
                storage.consume();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

    }
}

//定义多线程执行的主类：

public class ConsumerAndProducer{
    public static void main(String[] args){
        Storage storage = new Storage();

        Thread p1 = new Thread(new Producer(storage));
        Thread p2 = new Thread(new Producer(storage));
        Thread p3 = new Thread(new Producer(storage));

        Thread c1 = new Thread(new Consumer(storage));
        Thread c2 = new Thread(new Consumer(storage));
        Thread c3 = new Thread(new Consumer(storage));

        p1.start();
        p2.start();
        p3.start();
        c1.start();
        c2.start();
        c3.start();
    }
}

运行结果如下所示：
[生产者Thread-4]仓库为空
[生产者Thread-0]生产者了一个产品，现库存1
[消费者Thread-5]消费一个产品，现库存0
[生产者Thread-2]生产者了一个产品，现库存1
[生产者Thread-1]生产者了一个产品，现库存2
[消费者Thread-3]消费一个产品，现库存1
[消费者Thread-4]消费一个产品，现库存0
[生产者Thread-0]生产者了一个产品，现库存1
[消费者Thread-3]消费一个产品，现库存0
[生产者Thread-2]生产者了一个产品，现库存1
[消费者Thread-5]消费一个产品，现库存0
[生产者Thread-4]仓库为空
[生产者Thread-1]生产者了一个产品，现库存1
[消费者Thread-4]消费一个产品，现库存0
[生产者Thread-0]生产者了一个产品，现库存1
[生产者Thread-2]生产者了一个产品，现库存2
[消费者Thread-3]消费一个产品，现库存1
[消费者Thread-5]消费一个产品，现库存0
[生产者Thread-4]仓库为空
[生产者Thread-1]生产者了一个产品，现库存1
[消费者Thread-4]消费一个产品，现库存0
[生产者Thread-0]生产者了一个产品，现库存1
[消费者Thread-3]消费一个产品，现库存0
[生产者Thread-2]生产者了一个产品，现库存1
[消费者Thread-5]消费一个产品，现库存0
[生产者Thread-1]生产者了一个产品，现库存1
[消费者Thread-4]消费一个产品，现库存0
[生产者Thread-0]生产者了一个产品，现库存1
[生产者Thread-2]生产者了一个产品，现库存2
[消费者Thread-3]消费一个产品，现库存1
[消费者Thread-5]消费一个产品，现库存0
[生产者Thread-1]生产者了一个产品，现库存1
[消费者Thread-4]消费一个产品，现库存0

Process finished with exit code -1















